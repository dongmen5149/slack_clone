{"version":3,"file":"256.js","mappings":"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","sources":["webpack://slack_clone/./pages/Channel/styles.tsx","webpack://slack_clone/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  \n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== myData?.id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onChangeFile = useCallback((e) => {\n    const formData = new FormData();\n    if (e.target.files) {\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < e.target.files.length; i++) {\n        const file = e.target.files[i].getAsFile();\n        console.log('... file[' + i + '].name = ' + file.name);\n        formData.append('image', file);\n      }\n    }\n    axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {});\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log(e, '.... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["Container","Header","DragOver","workspace","channel","useParams","data","myData","useSWR","fetcher","chat","onChangeChat","setChat","useInput","channelData","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","showInviteChannelModal","setShowInviteChannelModal","useState","dragOver","setDragOver","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","name","startsWith","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","target","files","i","file","getAsFile","append","dataTransfer","items","kind","onDragOver","chatSections","makeSection","flat","reverse","className","onClick","type","ChatList","ref","ChatBox","InviteChannelModal","show"],"sourceRoot":""}