{"version":3,"file":"867.js","mappings":"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","sources":["webpack://slack_clone/./components/InviteChannelModal/index.tsx","webpack://slack_clone/./components/Modal/styles.tsx","webpack://slack_clone/./components/Modal/index.tsx","webpack://slack_clone/./hooks/useSocket.ts","webpack://slack_clone/./components/DMList/styles.tsx","webpack://slack_clone/./components/ChannelList/index.tsx","webpack://slack_clone/./components/DMList/index.tsx","webpack://slack_clone/./components/InviteWorkspaceModal/index.tsx","webpack://slack_clone/./components/Menu/styles.tsx","webpack://slack_clone/./components/Menu/index.tsx","webpack://slack_clone/./layouts/Workspace/styles.tsx","webpack://slack_clone/./components/CreateChannelModal/index.tsx","webpack://slack_clone/./layouts/Workspace/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { mutate: revalidateMembers } = useSWR<IUser[]>(\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then((response) => {\n          revalidateMembers(response.data, false);\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CloseModalButton, CreateModal } from '@components/Modal/styles';\nimport React, { FC, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: (e: any) => void;\n}\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import io, { Manager, Socket } from 'socket.io-client';\nimport { useCallback } from 'react';\n\nconst backUrl = 'http://localhost:3095';\n\nconst sockets: { [key: string]: Socket } = {};\nconst useSocket = (workspace?: string): [Socket | undefined, () => void] => {\n  console.log('rerender', workspace);\n  const disconnect = useCallback(() => {\n    if (workspace) {\n      sockets[workspace].disconnect();\n      delete sockets[workspace];\n    }\n  }, [workspace]);\n  if (!workspace) {\n    return [undefined, disconnect];\n  }\n  if (!sockets[workspace]) {\n    sockets[workspace] = io(`${backUrl}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n  }\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","// import useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst ChannelList: FC = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  // const [socket] = useSocket(workspace);\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData &&\n          channelData.map((channel) => {\n            return (\n              <NavLink key={channel.name} className=\"selected\" to={`/workspace/${workspace}/channel/${channel.name}`}>\n                <span># {channel.name}</span>\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nconst DMList: FC = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    // console.log('DMList: workspace 바꼈다', workspace);\n    setOnlineList([]);\n  }, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    // socket?.on('dm', onMessage);\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket);\n    return () => {\n      // socket?.off('dm', onMessage);\n      // console.log('socket off dm', socket?.hasListeners('dm'));\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData &&\n          memberData.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return (\n              <NavLink key={member.id} className=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\n                <i\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n                  }`}\n                  aria-hidden=\"true\"\n                  data-qa=\"presence_indicator\"\n                  data-qa-presence-self=\"false\"\n                  data-qa-presence-active=\"false\"\n                  data-qa-presence-dnd=\"false\"\n                />\n                <span>{member.nickname}</span>\n                {member.id === userData?.id && <span> (나)</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { mutate: revalidateMember } = useSWR<IChannel[] | false>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then((response) => {\n          revalidateMember(response.data, false);\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { CSSProperties, FC, useCallback } from 'react';\nimport { CloseModalButton, CreateMenu } from './styles';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: (e: any) => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\n  const preventDefault = useCallback((e) => {\n    e.preventDefault();\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div style={style} onClick={preventDefault}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\n\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n  & img {\n    display: flex;\n  }\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n    &.selected {\n      color: white;\n    }\n  }\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n  & h2 {\n    padding-left: 20px;\n  }\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { useCallback, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n\n  const { data: channelData, mutate: revalidateChannel } = useSWR<IChannel[]>(\n    userData ? `/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      axios\n        .post(\n          `/api/workspaces/${workspace}/channels`,\n          {\n            name: newChannel,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then((response) => {\n          setShowCreateChannelModal(false);\n          revalidateChannel(response.data, false);\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [workspace, newChannel],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import ChannelList from '@components/ChannelList';\nimport DMList from '@components/DMList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport Menu from '@components/Menu';\nimport Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceButton,\n  WorkspaceModal,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n} from '@layouts/Workspace/styles';\nimport loadable from '@loadable/component';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { VFC, useCallback, useState, useEffect } from 'react';\nimport { Navigate, useParams } from 'react-router';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\nimport { toast } from 'react-toastify';\nimport CreateChannelModal from '@components/CreateChannelModal';\n\nconst Channel = loadable(() => import('@pages/Channel'));\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\n\nconst Workspace: VFC = () => {\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkSpace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const [socket, disconnect] = useSocket(workspace);\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      console.log(socket);\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\n    }\n  }, [socket, channelData, userData]);\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n\n  const onLogout = useCallback(() => {\n    axios\n      .post('/api/users/logout', null, {\n        withCredentials: true,\n      })\n      .then(() => {\n        mutate(false, false);\n      });\n  }, []);\n\n  const onCloseUserProfile = useCallback((e) => {\n    e.stopPropagation();\n    setShowUserMenu(false);\n  }, []);\n\n  const onClickUserProfile = useCallback(() => {\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newUrl || !newUrl.trim()) return;\n      axios\n        .post(\n          '/api/workspaces',\n          {\n            workspace: newWorkspace,\n            url: newUrl,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then((response) => {\n          mutate(response.data, false);\n          setShowCreateWorkspaceModal(false);\n          setNewWorkSpace('');\n          setNewUrl('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const toggleWorkspaceModal = useCallback((e) => {\n    e.stopPropagation();\n    setShowWorkspaceModal((prev) => !prev);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(true);\n  }, []);\n\n  if (!userData) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <div>\n      <Header>\n        <RightMenu>\n          <span onClick={onClickUserProfile}>\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.nickname, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData &&\n            userData.Workspaces.map((ws) => {\n              return (\n                <Link key={ws.id} to={`/workspace/${ws.name}/channel/일반`}>\n                  <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n                </Link>\n              );\n            })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>Sleact</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Routes>\n            <Route path=\"/channel/:channel\" element={<Channel />} />\n            <Route path=\"/dm/:id\" element={<DirectMessage />} />\n          </Routes>\n        </Chats>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 url</span>\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","mutate","revalidateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","response","catch","error","console","dir","toast","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","sockets","log","disconnect","io","transports","undefined","CollapseButton","collapse","dedupingInterval","channelData","channelCollapse","setChannelCollapse","useState","toggleChannelCollapse","prev","className","map","key","name","to","memberData","socket","useSocket","onlineList","setOnlineList","useEffect","on","off","member","isOnline","includes","nickname","setShowInviteWorkspaceModal","revalidateMember","Modal","CreateMenu","Menu","style","closeButton","defaultProps","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","revalidateChannel","onCreateChannel","withCredentials","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showInviteWorkspaceModal","showInviteChannelModal","showWorkspaceModal","setShowWorkspaceModal","showCreateChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkSpace","newUrl","onChangeNewUrl","setNewUrl","emit","channels","v","onLogout","onCloseUserProfile","onClickUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","element","InviteChannelModal"],"sourceRoot":""}