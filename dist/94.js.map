{"version":3,"file":"94.js","mappings":"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","sources":["webpack://slack_clone/./pages/DirectMessage/styles.tsx","webpack://slack_clone/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/DirectMessage/styles';\nimport { IDM } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport gravatar from 'gravatar';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR, { mutate } from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    // id는 상대방 아이디\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      setTimeout(() => {\n        scrollbarRef.current?.scrollToBottom();\n      }, 100);\n    }\n  }, [chatData]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        mutateChat();\n      });\n    },\n    [mutateChat, workspace, id],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","Header","DragOver","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","dragOver","setDragOver","useState","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","onDragOver","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"sourceRoot":""}